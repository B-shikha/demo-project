<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.demo</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>demotest</name>
	<description>test</description>
	<dependencies>
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.8</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>3.141.59</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>

			<!-- Using Suite XML Files Another alternative is to use TestNG suite 
				XML files. This allows flexible configuration of the tests to be run. These 
				files are created in the normal way, and then added to the Surefire Plugin 
				configuration -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M4</version>
				<configuration>
					<suiteXmlFiles>
						<suiteXmlFile>testng.xml</suiteXmlFile>
					</suiteXmlFiles>
				</configuration>
			</plugin>
			<!-- Specifying Test Parameters Your TestNG test can accept parameters 
				with the @Parameters annotation. You can also pass parameters from Maven 
				into your TestNG test, by specifying them as system properties, -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M4</version>
				<configuration>
					<systemPropertyVariables>
						<propertyName>firefox</propertyName>
					</systemPropertyVariables>
				</configuration>
			</plugin>

			<!-- Using Groups TestNG allows you to group your tests. You can then 
				execute one or more specific groups. To do this with Surefire, use the groups 
				parameter, -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M4</version>
				<configuration>
					<groups>functest,perftest</groups>
				</configuration>
			</plugin>
			<!-- Running Tests in Parallel TestNG allows you to run your tests in 
				parallel, including JUnit tests. To do this, you must set the parallel parameter, 
				and may change the threadCount parameter if the default of 5 is not sufficient. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M4</version>
				<configuration>
					<parallel>methods</parallel>
					<threadCount>10</threadCount>
				</configuration>
			</plugin>

		</plugins>
	</build>

</project>